apiVersion: v1
kind: ConfigMap
metadata:
  name: scale-ci-workload-script
data:
  run.sh: |
    #!/bin/sh
    set -eo pipefail
    workload_log() { echo "$(date -u) $@" >&2; }
    export -f workload_log
    workload_log "Configuring pbench for Concurrent Scale Up Down"
    mkdir -p /var/lib/pbench-agent/tools-default/
    echo "${USER_NAME:-default}:x:$(id -u):0:${USER_NAME:-default} user:${HOME}:/sbin/nologin" >> /etc/passwd
    if [ "${ENABLE_PBENCH_AGENTS}" = true ]; then
      echo "" > /var/lib/pbench-agent/tools-default/disk
      echo "" > /var/lib/pbench-agent/tools-default/iostat
      echo "workload" > /var/lib/pbench-agent/tools-default/label
      echo "" > /var/lib/pbench-agent/tools-default/mpstat
      echo "" > /var/lib/pbench-agent/tools-default/oc
      echo "" > /var/lib/pbench-agent/tools-default/perf
      echo "" > /var/lib/pbench-agent/tools-default/pidstat
      echo "" > /var/lib/pbench-agent/tools-default/sar
      master_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/master= --no-headers | awk '{print $1}'`
      for node in $master_nodes; do
        echo "master" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      infra_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/infra= --no-headers | awk '{print $1}'`
      for node in $infra_nodes; do
        echo "infra" > /var/lib/pbench-agent/tools-default/remote@$node
      done
      worker_nodes=`oc get nodes -l pbench_agent=true,node-role.kubernetes.io/worker= --no-headers | awk '{print $1}'`
      for node in $worker_nodes; do
        echo "worker" > /var/lib/pbench-agent/tools-default/remote@$node
      done
    fi
    source /opt/pbench-agent/profile
    workload_log "Done configuring pbench Concurrent Scale Up Down"

    workload_log "Running Concurrent Scale Up Down workload"
    if [ "${PBENCH_INSTRUMENTATION}" = "true" ]; then
      pbench-user-benchmark -- sh /root/workload/workload.sh
      result_dir="/var/lib/pbench-agent/$(ls -t /var/lib/pbench-agent/ | grep "pbench-user" | head -1)"/1/sample1
      if [ "${ENABLE_PBENCH_COPY}" = "true" ]; then
        pbench-copy-results --prefix ${CONCURRENT_SCALEUP_TEST_PREFIX}
      fi
    else
      sh /root/workload/workload.sh
      result_dir=/tmp
    fi

    workload_log "Completed Concurrent Scale Up Down workload run"

    workload_log "Checking Test Results"
    workload_log "Checking ansible-playbook scale_up_complete.yaml execution exit code : ${exit_code}"

    if [ "$(jq '.exit_code==0' ${result_dir}/exit.json)" = "false" ]; then
      workload_log "Concurrent Scale Up Down Failure"
      workload_log "Test Analysis: Failed"
      exit 1
    fi
    # TODO: Check pbench-agent collected metrics for Pass/Fail
    # TODO: Check prometheus collected metrics for Pass/Fail
    workload_log "Test Analysis: Passed"

  workload.sh: |
    #!/bin/sh
    set -o pipefail

    result_dir=/tmp
    if [ "${PBENCH_INSTRUMENTATION}" = "true" ]; then
      result_dir=${benchmark_results_dir}
    fi

    # Save a local copy of the read-only ~/.kube/config
    cp ${KUBECONFIG} /tmp/kube_config
    ls -ltr /tmp
    export KUBECONFIG=/tmp/kube_config
    echo ${KUBECONFIG}

    # git clone svt repo in /root
    cd /root
    git clone https://github.com/openshift/svt.git
    cd svt
    git status
    cd /root/svt/openshift_performance/ci/content
    ls -ltr
   
    start_time=$(date +%s)
    my_time=$(date +%Y-%m-%d-%H%M)  

    ansible-playbook -vv -e api_url=${CONCURRENT_SCALEUP_API_URL} -e login_username="kubeadmin" -e login_passwd=${CONCURRENT_SCALEUP_KUBEADMIN_PASSWD} scale_up_complete.yaml 2>&1 | tee /tmp/output_scale_up_complete-${my_time}.log
   
    exit_code=$?
    end_time=$(date +%s)
    duration=$((end_time-start_time))
    workload_log "Test duration was: ${duration}"

    workload_log "/tmp/cluster_loader.err : $(cat /tmp/cluster_loader.err)"
    workload_log "/tmp/cluster_loader.out : $(cat /tmp/cluster_loader.out)"
    workload_log "/tmp/check_app.err : $(cat /tmp/check_app.err)"
    workload_log "/tmp/check_app.out : $(cat /tmp/check_app.out)"
    workload_log "/tmp/scale_test.err : $(cat /tmp/scale_test.err)"
    workload_log "/tmp/scale_test.out : $(cat /tmp/scale_test.out)"

    workload_log "Writing ansible-playbook scale_up_complete.yaml execution exit code : ${exit_code}"
    jq -n '. | ."exit_code"='${exit_code}' | ."duration"='${duration}'' > "${result_dir}/exit.json"
    workload_log "Finished workload script"
